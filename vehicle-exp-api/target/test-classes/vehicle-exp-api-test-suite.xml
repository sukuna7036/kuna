<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd">
    <munit:config mock-connectors="false" mock-inbounds="false" name="munit" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:vehicle-exp-api.xml"/>
        <spring:import resource="classpath:globals.xml"/>
    </spring:beans>
    <munit:test name="vehicle-exp-api-test-suite-api-main-vehicle" description="This test case is used to  validate the succsess response of the vehicle exp api by validating a part of payload using assert equals." >
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock leh-common-messaging-request">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('leh-common-messaging-request-preprocess-subflow')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Consuming XML Message from Vehicle Queue">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Consuming XML Message from Vehicle Queue']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Publishing Json Message to Vehicle Exchange">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Publishing XML Message to Vehicle Exchange']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Invoke Vehicle System API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP Invoke System API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource(&quot;scaffolder/response/success-response.json&quot;).asString()]" mimeType="application/json"/>
        </mock:when>
        <munit:set payload="#[getResource('scaffolder/request/vehicle-exp-request-vehicle.xml').asString()]" mimeType="application/xml" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="x-client-id" value="${https.auth.client.id}"/>
                <munit:inbound-property key="x-client-secret" value="${https.auth.client.secret}"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="api-main" doc:name="Flow-ref to api-main"/>
        <set-payload value="#[getResource('scaffolder/request/vehicle-exp-request-vehicle.xml').asString()]" mimeType="application/xml" doc:name="Set Payload"/>
        <flow-ref name="vehicle-exp-api-processing-flow" doc:name="vehicle-exp-api-processing-flow"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <mock:verify-call messageProcessor=".*:.*" times="1" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP Invoke System API']"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="vehicle-exp-api-test-suite-api-mainTest-failure" description="This test case is used to  validate the failure response of the vehicle exp api by verifying the number of calls." >
        <munit:set payload="#[getResource('scaffolder/request/vehicle-exp-error-request.xml').asString()]" mimeType="application/xml" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="x-client-id" value="test1"/>
                <munit:inbound-property key="x-client-secret" value="test"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="api-main" doc:name="Flow-ref to api-main"/>
        <set-payload value="#[getResource('scaffolder/request/vehicle-exp-error-request.xml').asString()]" mimeType="application/xml" doc:name="Set Payload"/>
        <flow-ref name="vehicle-exp-api-processing-flow" doc:name="Flow Reference"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <munit:assert-on-equals message="Status assertion failed!!" expectedValue="#[true]" actualValue="#[payload.contains('error')]" doc:name="Assert Equals"/>
    </munit:test>
    <munit:test name="vehicle-exp-api-test-suite-api-main-vehicleAssociationsAndvehicle" description="This test case is used to  validate the succsess response of the vehicle exp api by validating a part of payload using assert equals." >
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock leh-common-messaging-request-preprocess-subflow">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('leh-common-messaging-request-preprocess-subflow')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Consuming XML Message from Vehicle Queue">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Consuming XML Message from Vehicle Queue']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Publishing Json Message to Vehicle Exchange">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Publishing Json Message to Vehicle Exchange']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Invoke Vehicle System API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP Invoke System API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource(&quot;scaffolder/response/success-response.json&quot;).asString()]" mimeType="application/json"/>
        </mock:when>
        <munit:set payload="#[getResource('scaffolder/request/vehicle-exp-request-vehicleAssociationsAndVehicle.xml').asString()]" mimeType="application/xml" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="x-client-id" value="${https.auth.client.id}"/>
                <munit:inbound-property key="x-client-secret" value="${https.auth.client.secret}"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="api-main" doc:name="Flow-ref to api-main"/>
        <set-payload value="#[getResource('scaffolder/request/vehicle-exp-request-vehicleAssociationsAndVehicle.xml').asString()]" mimeType="application/xml" doc:name="Set Payload"/>
        <flow-ref name="vehicle-exp-api-processing-flow" doc:name="vehicle-exp-api-processing-flow"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <mock:verify-call messageProcessor=".*:.*" times="1" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP Invoke System API']"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="vehicle-exp-api-test-suite-api-main-vehiclePolicies" description="This test case is used to  validate the succsess response of the vehicle exp api by validating a part of payload using assert equals." >
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock  leh-common-messaging-request-preprocess-subflow">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('leh-common-messaging-request-preprocess-subflow')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Consuming XML Message from Vehicle Queue">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Consuming XML Message from Vehicle Queue']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Publishing Json Message to Vehicle Exchange">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Publishing Json Message to Vehicle Exchange']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Invoke Vehicle System API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP Invoke System API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource(&quot;scaffolder/response/success-response.json&quot;).asString()]" mimeType="application/json"/>
        </mock:when>
        <munit:set payload="#[getResource('scaffolder/request/vehicle-exp-request-vehiclePolicies.xml').asString()]" mimeType="application/xml" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="x-client-id" value="${https.auth.client.id}"/>
                <munit:inbound-property key="x-client-secret" value="${https.auth.client.secret}"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="api-main" doc:name="Flow-ref to api-main"/>
        <set-payload value="#[getResource('scaffolder/request/vehicle-exp-request-vehiclePolicies.xml').asString()]" mimeType="application/xml" doc:name="Set Payload"/>
        <flow-ref name="vehicle-exp-api-processing-flow" doc:name="vehicle-exp-api-processing-flow"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <mock:verify-call messageProcessor=".*:.*" times="1" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP Invoke System API']"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="vehicle-exp-api-test-suite-api-main-vehicleAndvehiclePolicies" description="This test case is used to  validate the succsess response of the vehicle exp api by validating a part of payload using assert equals." >
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock leh-common-messaging-request-preprocess-subflow">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('leh-common-messaging-request-preprocess-subflow')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Consuming XML Message from Vehicle Queue">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Consuming XML Message from Vehicle Queue']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Publishing Json Message to Vehicle Exchange">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Publishing Json Message to Vehicle Exchange']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Invoke Vehicle System API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP Invoke System API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource(&quot;scaffolder/response/success-response.json&quot;).asString()]" mimeType="application/json"/>
        </mock:when>
        <munit:set payload="#[getResource('scaffolder/request/vehicle-exp-request-VehicleAndVehiclePolicies.xml').asString()]" mimeType="application/xml" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="x-client-id" value="${https.auth.client.id}"/>
                <munit:inbound-property key="x-client-secret" value="${https.auth.client.secret}"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="api-main" doc:name="Flow-ref to api-main"/>
        <set-payload value="#[getResource('scaffolder/request/vehicle-exp-request-VehicleAndVehiclePolicies.xml').asString()]" mimeType="application/xml" doc:name="Set Payload"/>
        <flow-ref name="vehicle-exp-api-processing-flow" doc:name="vehicle-exp-api-processing-flow"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <mock:verify-call messageProcessor=".*:.*" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP Invoke System API']"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="vehicle-exp-api-test-suite-api-main-vehicle-exp" description="This test case is used to  validate the succsess response of the vehicle exp api by validating a part of payload using assert equals." >
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock leh-common-messaging-request-preprocess-subflow">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('leh-common-messaging-request-preprocess-subflow')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Consuming XML Message from Vehicle Queue">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Consuming XML Message from Vehicle Queue']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Publishing Json Message to Vehicle Exchange">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Publishing Json Message to Vehicle Exchange']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Invoke Vehicle System API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP Invoke System API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource(&quot;scaffolder/response/success-response.json&quot;).asString()]" mimeType="application/json"/>
        </mock:when>
        <munit:set payload="#[getResource('scaffolder/request/vehicle-exp-request.xml').asString()]" mimeType="application/xml" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="x-client-id" value="${https.auth.client.id}"/>
                <munit:inbound-property key="x-client-secret" value="${https.auth.client.secret}"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="api-main" doc:name="Flow-ref to api-main"/>
        <set-payload value="#[getResource('scaffolder/request/vehicle-exp-request.xml').asString()]" mimeType="application/xml" doc:name="Set Payload"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <flow-ref name="vehicle-exp-api-processing-flow" doc:name="vehicle-exp-api-processing-flow"/>
        <mock:verify-call messageProcessor=".*:.*" times="1" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP Invoke System API']"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="vehicle-exp-api-test-suite-api-main-vehicleAssociationsAndvehiclepolicies" description="This test case is used to  validate the succsess response of the vehicle exp api by validating a part of payload using assert equals." >
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock leh-common-messaging-request">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('leh-common-messaging-request-preprocess-subflow')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Consuming XML Message from Vehicle Queue">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Consuming XML Message from Vehicle Queue']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Publishing Json Message to Vehicle Exchange">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Publishing XML Message to Vehicle Exchange']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Invoke Vehicle System API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP Invoke System API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource(&quot;scaffolder/response/success-response.json&quot;).asString()]" mimeType="application/json"/>
        </mock:when>
        <munit:set payload="#[getResource('scaffolder/request/vehicle-exp-request-vehicleAssociationsAndvehiclePolicies.xml').asString()]" mimeType="application/xml" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="x-client-id" value="${https.auth.client.id}"/>
                <munit:inbound-property key="x-client-secret" value="${https.auth.client.secret}"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="api-main" doc:name="Flow-ref to api-main"/>
        <set-payload value="#[getResource('scaffolder/request/vehicle-exp-request-vehicleAssociationsAndvehiclePolicies.xml').asString()]" mimeType="application/xml" doc:name="Set Payload"/>
        <flow-ref name="vehicle-exp-api-processing-flow" doc:name="vehicle-exp-api-processing-flow"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <mock:verify-call messageProcessor=".*:.*" times="1" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP Invoke System API']"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="vehicle-exp-api-test-suite-api-main-vehicleAssociations" description="This test case is used to  validate the succsess response of the vehicle exp api by validating a part of payload using assert equals." >
        <mock:when messageProcessor="mule:sub-flow" doc:name="Mock leh-common-messaging-request">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue="#[matchContains('leh-common-messaging-request-preprocess-subflow')]"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Consuming XML Message from Vehicle Queue">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Consuming XML Message from Vehicle Queue']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Publishing Json Message to Vehicle Exchange">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Publishing XML Message to Vehicle Exchange']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Invoke Vehicle System API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP Invoke System API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource(&quot;scaffolder/response/success-response.json&quot;).asString()]" mimeType="application/json"/>
        </mock:when>
        <munit:set payload="#[getResource('scaffolder/request/vehicle-exp-request-vehicleAssociations.xml').asString()]" mimeType="application/xml" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="x-client-id" value="${https.auth.client.id}"/>
                <munit:inbound-property key="x-client-secret" value="${https.auth.client.secret}"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="api-main" doc:name="Flow-ref to api-main"/>
        <set-payload value="#[getResource('scaffolder/request/vehicle-exp-request-vehicleAssociations.xml').asString()]" mimeType="application/xml" doc:name="Set Payload"/>
        <flow-ref name="vehicle-exp-api-processing-flow" doc:name="vehicle-exp-api-processing-flow"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <mock:verify-call messageProcessor=".*:.*" times="1" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['HTTP Invoke System API']"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
    <munit:test name="vehicle-exp-api-test-suite-api-main-soapfault" description="Test">
        <munit:set payload="#[getResource('scaffolder/request/vehicle-exp-soapfault.xml').asString()]" mimeType="application/xml" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="x-client-id" value="test"/>
                <munit:inbound-property key="x-client-secret" value="test"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="api-main" doc:name="Flow-ref to api-main"/>
        <mock:verify-call messageProcessor=".*:.*" doc:name="Verify Call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Transformation - Create Success/Failure Response']"/>
            </mock:with-attributes>
        </mock:verify-call>
    </munit:test>
</mule>

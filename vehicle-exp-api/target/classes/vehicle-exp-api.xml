<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:context="http://www.springframework.org/schema/context" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:anypoint-mq="http://www.mulesoft.org/schema/mule/anypoint-mq"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit-soap="http://www.mulesoft.org/schema/mule/apikit-soap" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/apikit-soap http://www.mulesoft.org/schema/mule/apikit-soap/current/mule-apikit-soap.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/anypoint-mq http://www.mulesoft.org/schema/mule/anypoint-mq/current/mule-anypoint-mq.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">



 
  
    <apikit-soap:config name="InchcapeVehicleInterface_v1Service" wsdlUrl="vehicle-exp-ws-WSDL_v0.1.wsdl" serviceName="InchcapeVehicleInterface_v1Service" portName="InchcapeVehicleInterface_v1" doc:name="APIkit SOAP: Configuration" inboundValidationMessage="true"/>
    <flow name="api-main">
    <http:listener path="${https.path}" config-ref="Vehicle_HTTP_Listener_Config" doc:name="HTTP Listener - to Receive SOAP based Vehicle Request" />
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML- Transformation of Payload"/>
        <flow-ref name="leh-common-request-preprocess-subflow" doc:name="LEH - Request Preprocess"/>
        <flow-ref name="leh-common-trans-log-start-subflow" doc:name="leh-common-trans-log-start-subflow"/>
        <flow-ref name="leh-common-service-log-start-subflow" doc:name="LEH - Log Service Start"/>        
		<flow-ref name="authentication-exp-flow" doc:name="Perform User Authentication"/>
            <choice doc:name="Check for Custom Authentication Failure HTTP Status Code">
            <when expression="#[message.outboundProperties.'http.status' == 403]">
                <dw:transform-message doc:name="Create Invalid Credentials  Response">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace soap http://schemas.xmlsoap.org/soap/envelope/
%namespace ns0 http://www.cloudhub.io/schemas/class/InchcapeVehicleInterface_v1
%namespace ns1 http://www.cloudhub.io/schemas/class/GenericWebServiceInterface
---
{
  soap#Envelope:{
      soap#Body:{
    ns0#sendVehicleResponse:{
        ns1#result: {
        ns1#status: "error",
        ns1#http-status-code: 403,
        ns1#summary:"Invalid Credentials",
        ns1#description:"Authorization failed due to invalid credentials",
        ns1#request-timestamp:now as :datetime {format: "yyyy-MM-dd HH:mm:ss.SSS"}
       }
      }
    }
  }
}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <apikit-soap:router config-ref="InchcapeVehicleInterface_v1Service" doc:name="Vehicle SOAPKit Router"/>
                <scripting:component doc:name="Retrieving Fault Details">
                    <scripting:script engine="Groovy"><![CDATA[def str= payload;
def status=message.getInvocationProperty('flag');
if(status == null)
{
message.setInvocationProperty('flag',false)
def substr=str.substring(str.indexOf("<faultstring>"),str.indexOf("</faultstring>"));
def substrcode=str.substring(str.indexOf("<faultcode>"),str.indexOf("</faultcode>"));
def faultcode=(substrcode.replaceAll("<faultcode>",""));
def faultstring=((substr.replaceAll("<faultstring>","")).replaceAll("<","")).replaceAll(">","");
message.setInvocationProperty('faultString', faultstring)
message.setInvocationProperty('faultCode', faultcode)

}

]]></scripting:script>
                </scripting:component>
                <dw:transform-message doc:name="Transformation - Create Success/Failure Response">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace soap http://schemas.xmlsoap.org/soap/envelope/
%namespace ns0 http://www.cloudhub.io/schemas/class/InchcapeVehicleInterface_v1
%namespace ns1 http://www.cloudhub.io/schemas/class/GenericWebServiceInterface

---

{ 
	soap#Envelope :{
  		soap#Body:{
  			ns0#sendVehicleResponse: {
				ns1#result: {
					ns1#status: "Success",
					ns1#http-status-code: 200,
					ns1#summary: "Success response message",
					ns1#description: "Success response message",
					ns1#request-timestamp:now as :datetime {format: "yyyy-MM-dd HH:mm:ss.SSS"}
				}
			}
		}
	}
} when (flowVars.flag) otherwise {
  	soap#Envelope:{
  		soap#Body:{
  			ns0#sendVehicleResponse:{
  				ns1#result: {
  					ns1#status: "Fault",
			 		ns1#http-status-code: 500,
			 		ns1#summary :flowVars.faultCode,
			 		ns1#description :flowVars.faultString,
			 		ns1#request-timestamp:now as :datetime {format: "yyyy-MM-dd HH:mm:ss.SSS"} 
	   			}
	  		}
		}	
	}
}
]]></dw:set-payload>
                </dw:transform-message>
            </otherwise>
        </choice>
    
    <!-- *** Use the custom and common Exception Strategy defined from 'Logging and Exception Strategy Utility Framework' *** -->
        <exception-strategy ref="global-exception-strategy" doc:name="Reference Exception Strategy"/> 
  </flow>
  <flow name="sendVehicle:InchcapeVehicleInterface_v1Service">
        <anypoint-mq:publish config-ref="Anypoint_MQ_Configuration" destination="${mq.queue}" doc:name="Publishing XML Message to Vehicle Exchange">
            <anypoint-mq:message-builder>
                <anypoint-mq:properties>
                    <anypoint-mq:property propertyName="transactionId" value="#[sessionVars.transactionId]"/>
                </anypoint-mq:properties>
            </anypoint-mq:message-builder>
        </anypoint-mq:publish>

	<set-variable variableName="flag" value="#[true]" doc:name="Set Flag"/>


  </flow>
    <flow name="vehicle-exp-api-processing-flow">
        <anypoint-mq:subscriber config-ref="Anypoint_MQ_Configuration" destination="${mq.queue}" acknowledgementMode="MANUAL" reconnectionWaitTime="10000" reconnectionAttempts="3" doc:name="Consuming XML Message from Vehicle Queue"/>
        <message-properties-transformer doc:name="Set Leh Properties" scope="session">
            <add-message-property key="messageId" value="#[message.inboundProperties.messageId]"/>
        </message-properties-transformer>
        <flow-ref name="leh-common-messaging-request-preprocess-subflow" doc:name="leh-common-messaging-request-preprocess-subflow"/>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <dw:transform-message doc:name="Payload Transformation to Java">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%namespace ns0 http://www.cloudhub.io/schemas/class/InchcapeVehicleInterface_v1
%var isvehicleReq=
 (payload.ns0#sendVehicle.ns0#Vehicle.ns0#BuildDate !=null or 
 payload.ns0#sendVehicle.ns0#Vehicle.ns0#BusinessId !=null or
 payload.ns0#sendVehicle.ns0#Vehicle.ns0#DeliveryDate !=null or
 payload.ns0#sendVehicle.ns0#Vehicle.ns0#EngineNumber !=null or
 payload.ns0#sendVehicle.ns0#Vehicle.ns0#ExternalColour !=null or
 payload.ns0#sendVehicle.ns0#Vehicle.ns0#ExternalId !=null or payload.ns0#sendVehicle.ns0#Vehicle.ns0#ExternalSalespersonId !=null or payload.ns0#sendVehicle.ns0#Vehicle.ns0#ExternalVehicleId !=null or payload.ns0#sendVehicle.ns0#Vehicle.ns0#InternalColour !=null or
 payload.ns0#sendVehicle.ns0#Vehicle.ns0#KeyNumber !=null or
 payload.ns0#sendVehicle.ns0#Vehicle.ns0#Make !=null or
 payload.ns0#sendVehicle.ns0#Vehicle.ns0#ModelCode !=null or
 payload.ns0#sendVehicle.ns0#Vehicle.ns0#ModelColourCode !=null or
 payload.ns0#sendVehicle.ns0#Vehicle.ns0#ModelYear !=null or
 payload.ns0#sendVehicle.ns0#Vehicle.ns0#OdometerReading !=null or payload.ns0#sendVehicle.ns0#Vehicle.ns0#PrimaryStatus !=null or payload.ns0#sendVehicle.ns0#Vehicle.ns0#ReceivedInStockDate !=null or payload.ns0#sendVehicle.ns0#Vehicle.ns0#SecondaryStatus !=null or payload.ns0#sendVehicle.ns0#Vehicle.ns0#SourceSystem !=null or
 payload.ns0#sendVehicle.ns0#Vehicle.ns0#StockNumber !=null or
 payload.ns0#sendVehicle.ns0#Vehicle.ns0#VIN !=null)
---
{
	vehicle-request: {
		(vehicle: {
			(BuildDate: payload.ns0#sendVehicle.ns0#Vehicle.ns0#BuildDate) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#BuildDate !=null),
			(BusinessId: payload.ns0#sendVehicle.ns0#Vehicle.ns0#BusinessId) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#BusinessId !=null),
			(DeliveryDate: payload.ns0#sendVehicle.ns0#Vehicle.ns0#DeliveryDate) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#DeliveryDate !=null),
			(EngineNumber: payload.ns0#sendVehicle.ns0#Vehicle.ns0#EngineNumber) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#EngineNumber !=null),
			(ExternalColour: payload.ns0#sendVehicle.ns0#Vehicle.ns0#ExternalColour) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#ExternalColour !=null),
			(ExternalId: payload.ns0#sendVehicle.ns0#Vehicle.ns0#ExternalId) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#ExternalId !=null),
			(ExternalSalespersonId: payload.ns0#sendVehicle.ns0#Vehicle.ns0#ExternalSalespersonId) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#ExternalSalespersonId !=null),
			(ExternalVehicleId: payload.ns0#sendVehicle.ns0#Vehicle.ns0#ExternalVehicleId) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#ExternalVehicleId !=null),
			(InternalColour: payload.ns0#sendVehicle.ns0#Vehicle.ns0#InternalColour) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#InternalColour !=null),
			(KeyNumber: payload.ns0#sendVehicle.ns0#Vehicle.ns0#KeyNumber) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#KeyNumber !=null),
			(Make: payload.ns0#sendVehicle.ns0#Vehicle.ns0#Make) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#Make !=null),
			(ModelCode: payload.ns0#sendVehicle.ns0#Vehicle.ns0#ModelCode) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#ModelCode !=null),
			(ModelColourCode: payload.ns0#sendVehicle.ns0#Vehicle.ns0#ModelColourCode) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#ModelColourCode !=null),
			(ModelYear: payload.ns0#sendVehicle.ns0#Vehicle.ns0#ModelYear) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#ModelYear !=null),
			(OdometerReading: payload.ns0#sendVehicle.ns0#Vehicle.ns0#OdometerReading) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#OdometerReading !=null),
			(PrimaryStatus: payload.ns0#sendVehicle.ns0#Vehicle.ns0#PrimaryStatus) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#PrimaryStatus !=null),
			(ReceivedInStockDate: payload.ns0#sendVehicle.ns0#Vehicle.ns0#ReceivedInStockDate) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#ReceivedInStockDate !=null),
			(SecondaryStatus: payload.ns0#sendVehicle.ns0#Vehicle.ns0#SecondaryStatus) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#SecondaryStatus !=null),
			(SourceSystem: payload.ns0#sendVehicle.ns0#Vehicle.ns0#SourceSystem) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#SourceSystem !=null),
			(StockNumber: payload.ns0#sendVehicle.ns0#Vehicle.ns0#StockNumber) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#StockNumber !=null),
			(VIN: payload.ns0#sendVehicle.ns0#Vehicle.ns0#VIN) when (payload.ns0#sendVehicle.ns0#Vehicle.ns0#VIN !=null)
		}) when (isvehicleReq),
		vehicle-associations: (payload.ns0#sendVehicle.*ns0#vehicleAssociations default []) filter ($ != null) map ((vehicleassociation , indexOfVehicleassociation) -> {
			(AssociationType: vehicleassociation.ns0#AssociationType) when (vehicleassociation.ns0#AssociationType !=null),
			(BusinessId: vehicleassociation.ns0#BusinessId) when (vehicleassociation.ns0#BusinessId !=null),
			(EndDate: vehicleassociation.ns0#EndDate) when (vehicleassociation.ns0#EndDate !=null),
			(ExternalEntityId: vehicleassociation.ns0#ExternalEntityId) when (vehicleassociation.ns0#ExternalEntityId !=null),
			(ExternalEntityType: vehicleassociation.ns0#ExternalEntityType) when (vehicleassociation.ns0#ExternalEntityType !=null),
			(ExternalFleetId: vehicleassociation.ns0#ExternalFleetId) when (vehicleassociation.ns0#ExternalFleetId !=null),
			(ExternalId: vehicleassociation.ns0#ExternalId) when (vehicleassociation.ns0#ExternalId !=null),
			(ExternalSellingDealerId: vehicleassociation.ns0#ExternalSellingDealerId) when (vehicleassociation.ns0#ExternalSellingDealerId !=null),
			(ExternalVehicleId: vehicleassociation.ns0#ExternalVehicleId) when (vehicleassociation.ns0#ExternalVehicleId !=null),
			(IsPrimary: vehicleassociation.ns0#IsPrimary) when (vehicleassociation.ns0#IsPrimary !=null) as :boolean,
			(IsReversal: vehicleassociation.ns0#IsReversal) when (vehicleassociation.ns0#IsReversal !=null) as :boolean,
			(PrimaryVehicleUse: vehicleassociation.ns0#PrimaryVehicleUse) when (vehicleassociation.ns0#PrimaryVehicleUse !=null),
			(RegistrationNumber: vehicleassociation.ns0#RegistrationNumber) when (vehicleassociation.ns0#RegistrationNumber !=null),
			(SourceSystem: vehicleassociation.ns0#SourceSystem) when (vehicleassociation.ns0#SourceSystem !=null),
			(StartDate: vehicleassociation.ns0#StartDate) when (vehicleassociation.ns0#StartDate !=null),
			(VIN: vehicleassociation.ns0#VIN) when (vehicleassociation.ns0#VIN !=null)
		}),
		vehicle-policies: (payload.ns0#sendVehicle.*ns0#vehiclePolicies default []) filter ($ != null) map ((vehiclepolicy , indexOfVehiclepolicy) -> { 
			(BusinessId: vehiclepolicy.ns0#BusinessId) when (vehiclepolicy.ns0#BusinessId !=null),
			(EndDate: vehiclepolicy.ns0#EndDate) when (vehiclepolicy.ns0#EndDate !=null),
			(ExternalCustomerId: vehiclepolicy.ns0#ExternalCustomerId) when (vehiclepolicy.ns0#ExternalCustomerId !=null),
			(ExternalId: vehiclepolicy.ns0#ExternalId) when (vehiclepolicy.ns0#ExternalId !=null),
			(ExternalVehicleId: vehiclepolicy.ns0#ExternalVehicleId) when (vehiclepolicy.ns0#ExternalVehicleId !=null),
			(InceptionDate: vehiclepolicy.ns0#InceptionDate) when (vehiclepolicy.ns0#InceptionDate !=null),
			(InvalidReason: vehiclepolicy.ns0#InvalidReason) when (vehiclepolicy.ns0#InvalidReason !=null),
			(LinkToOwner: vehiclepolicy.ns0#LinkToOwner) when (vehiclepolicy.ns0#LinkToOwner !=null) as :boolean,
			(PendingAction: vehiclepolicy.ns0#PendingAction) when (vehiclepolicy.ns0#PendingAction !=null),
			(PolicyStatus: vehiclepolicy.ns0#PolicyStatus) when (vehiclepolicy.ns0#PolicyStatus !=null),
			(Provider: vehiclepolicy.ns0#Provider) when (vehiclepolicy.ns0#Provider !=null),
			(ProviderMarketing: vehiclepolicy.ns0#ProviderMarketing) when (vehiclepolicy.ns0#ProviderMarketing !=null) as :boolean,
			(ProviderPolicyNumber: vehiclepolicy.ns0#ProviderPolicyNumber) when (vehiclepolicy.ns0#ProviderPolicyNumber !=null),
			(ProviderStatus: vehiclepolicy.ns0#ProviderStatus) when (vehiclepolicy.ns0#ProviderStatus !=null),
			(ProvisioningError: vehiclepolicy.ns0#ProvisioningError) when (vehiclepolicy.ns0#ProvisioningError !=null),
			(ProvisioningStatus: vehiclepolicy.ns0#ProvisioningStatus) when (vehiclepolicy.ns0#ProvisioningStatus !=null),
			(SourceSystem: vehiclepolicy.ns0#SourceSystem) when (vehiclepolicy.ns0#SourceSystem !=null),
			(StartDate: vehiclepolicy.ns0#StartDate) when (vehiclepolicy.ns0#StartDate !=null),
			(Type: vehiclepolicy.ns0#Type) when (vehiclepolicy.ns0#Type !=null),
			(VIN: vehiclepolicy.ns0#VIN) when (vehiclepolicy.ns0#VIN !=null)
		})
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <set-session-variable variableName="originalPayload" value="#[payload]" doc:name="Set Original Payload"/>
        <dw:transform-message doc:name="JAVA to JSON - Transformation of Payload">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="HTTP_Request_Configuration" path="${vehicle.sys.http.listener.path}" method="POST" doc:name="HTTP Invoke System API">
            <http:request-builder>
                <http:header headerName="transactionId" value="#[sessionVars.transactionId]"/>
            </http:request-builder>
        </http:request>
        <anypoint-mq:ack config-ref="Anypoint_MQ_Configuration" doc:name="Acknowledging Vehicle Queue"/>
        <flow-ref name="leh-common-service-log-complete-subflow" doc:name="LEH - Log Service Complete"/>
        <exception-strategy ref="global-exception-strategy" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="authentication-exp-flow">
        <set-variable variableName="clientId" value="${https.auth.client.id}" doc:name="Set Client Id"/>
        <set-variable variableName="clientSecret" value="${https.auth.client.secret}" doc:name="Set Client Secret"/>

        <validation:is-true message="Authorisation error - client id or secret invalid" expression="#[message.inboundProperties.'x-client-id' == flowVars.clientId  &amp;&amp;  message.inboundProperties.'x-client-secret' == flowVars.clientSecret ]" doc:name="Validate - Client Id and Client Secret" exceptionClass="org.mule.api.security.UnauthorisedException"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <set-property propertyName="http.status" value="#[403]" doc:name="Property"/>
        </catch-exception-strategy> 
    </flow>
    
</mule>